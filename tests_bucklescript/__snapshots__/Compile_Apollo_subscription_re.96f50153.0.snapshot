Compile Apollo › subscription.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

function parse(value) {
  var value$1 = value.simpleSubscription;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          HASH: /* Dog */3406428,
          VAL: {
            __typename: value$1.__typename,
            name: value$1.name
          }
        };
        break;
    case \"Human\" :
        tmp = {
          HASH: /* Human */-1031617139,
          VAL: {
            __typename: value$1.__typename,
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        HASH: /* FutureAddedValue */-31101740,
        VAL: value$1
      };
  }
  return {
          simpleSubscription: tmp
        };
}

function serialize(value) {
  var value$1 = value.simpleSubscription;
  var variant = value$1.HASH;
  var simpleSubscription;
  if (variant !== -31101740) {
    if (variant >= 3406428) {
      var value$2 = value$1.VAL.name;
      simpleSubscription = {
        __typename: \"Dog\",
        name: value$2
      };
    } else {
      var value$3 = value$1.VAL.name;
      simpleSubscription = {
        __typename: \"Human\",
        name: value$3
      };
    }
  } else {
    simpleSubscription = value$1.VAL;
  }
  return {
          simpleSubscription: simpleSubscription
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: \"subscription   {\\nsimpleSubscription  {\\n__typename\\n...on Dog   {\\n__typename  \\nname  \\n}\\n\\n...on Human   {\\n__typename  \\nname  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

exports.MyQuery = MyQuery;
/* No side effect */

