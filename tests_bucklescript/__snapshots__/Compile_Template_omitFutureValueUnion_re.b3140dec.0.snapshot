Compile Template › omitFutureValueUnion.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = (require(\"gql\")`
  query   {
    dogOrHuman  {
      __typename
      ...on Dog   {
        name
        barkVolume
      }
      ...on Human   {
        name
      }
    }
  }
`);

function parse(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          HASH: /* Dog */3406428,
          VAL: {
            name: value$1.name,
            barkVolume: value$1.barkVolume
          }
        };
        break;
    case \"Human\" :
        tmp = {
          HASH: /* Human */-1031617139,
          VAL: {
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        HASH: /* FutureAddedValue */-31101740,
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.HASH;
  var dogOrHuman;
  if (variant !== -31101740) {
    if (variant >= 3406428) {
      var value$2 = value$1.VAL;
      var value$3 = value$2.barkVolume;
      var value$4 = value$2.name;
      dogOrHuman = {
        __typename: \"Dog\",
        name: value$4,
        barkVolume: value$3
      };
    } else {
      var value$5 = value$1.VAL.name;
      dogOrHuman = {
        __typename: \"Human\",
        name: value$5
      };
    }
  } else {
    dogOrHuman = value$1.VAL;
  }
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var Normal = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

var query$1 = (require(\"gql\")`
  query   {
    dogOrHuman  {
      __typename
      ...on Dog   {
        name
        barkVolume
      }
      ...on Human   {
        name
      }
    }
  }
`);

function parse$1(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          HASH: /* Dog */3406428,
          VAL: {
            name: value$1.name,
            barkVolume: value$1.barkVolume
          }
        };
        break;
    case \"Human\" :
        tmp = {
          HASH: /* Human */-1031617139,
          VAL: {
            name: value$1.name
          }
        };
        break;
    default:
      throw {
            RE_EXN_ID: \"Not_found\",
            Error: new Error()
          };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize$1(value) {
  var value$1 = value.dogOrHuman;
  var dogOrHuman;
  if (value$1.HASH >= 3406428) {
    var value$2 = value$1.VAL;
    var value$3 = value$2.barkVolume;
    var value$4 = value$2.name;
    dogOrHuman = {
      __typename: \"Dog\",
      name: value$4,
      barkVolume: value$3
    };
  } else {
    var value$5 = value$1.VAL.name;
    dogOrHuman = {
      __typename: \"Human\",
      name: value$5
    };
  }
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var ByConfig = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var Raw$2 = {};

var query$2 = (require(\"gql\")`
  query   {
    dogOrHuman  {
      __typename
      ...on Dog   {
        name
        barkVolume
      }
      ...on Human   {
        name
      }
    }
  }
`);

function parse$2(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          HASH: /* Dog */3406428,
          VAL: {
            name: value$1.name,
            barkVolume: value$1.barkVolume
          }
        };
        break;
    case \"Human\" :
        tmp = {
          HASH: /* Human */-1031617139,
          VAL: {
            name: value$1.name
          }
        };
        break;
    default:
      throw {
            RE_EXN_ID: \"Not_found\",
            Error: new Error()
          };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize$2(value) {
  var value$1 = value.dogOrHuman;
  var dogOrHuman;
  if (value$1.HASH >= 3406428) {
    var value$2 = value$1.VAL;
    var value$3 = value$2.barkVolume;
    var value$4 = value$2.name;
    dogOrHuman = {
      __typename: \"Dog\",
      name: value$4,
      barkVolume: value$3
    };
  } else {
    var value$5 = value$1.VAL.name;
    dogOrHuman = {
      __typename: \"Human\",
      name: value$5
    };
  }
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var ByDirective = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2
};

exports.Normal = Normal;
exports.ByConfig = ByConfig;
exports.ByDirective = ByDirective;
/* query Not a pure module */

