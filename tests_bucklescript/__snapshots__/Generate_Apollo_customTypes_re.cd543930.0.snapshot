Generate Apollo › customTypes.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module Color = {
  type t =
    | Red
    | Green
    | Blue;
  let parse = json =>
    switch (json |> Js.Json.decodeString) {
    | Some(\"green\") => Green
    | Some(\"blue\") => Blue
    | Some(\"red\")
    | Some(_)
    | None => Red
    };
  let serialize = color =>
    (
      switch (color) {
      | Red => \"red\"
      | Green => \"green\"
      | Blue => \"blue\"
      }
    )
    |> Js.Json.string;
};
module DateTime = {
  type t = Js.Date.t;
  let parse = json =>
    switch (json |> Js.Json.decodeString) {
    | Some(str) => str |> Js.Date.fromString
    | None => Js.Date.make()
    };
  let serialize = date => date |> Js.Date.toISOString |> Js.Json.string;
};
module MyQuery: {
  module Raw: {
    type t_customFields = {
      __typename: string,
      currentTime: Js.Json.t,
      favoriteColor: Js.Json.t,
      futureTime: Js.Nullable.t(Js.Json.t),
      nullableColor: Js.Nullable.t(Js.Json.t),
    };
    type t = {customFields: t_customFields};
    type t_variables = unit;
  };
  type t_customFields = {
    __typename: string,
    currentTime: Js.Json.t,
    favoriteColor: Js.Json.t,
    futureTime: option(Js.Json.t),
    nullableColor: option(Color.t),
  };
  type t = {customFields: t_customFields};
  type t_variables = unit;
  let query: string;
  let parse: Raw.t => t;
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_customFields = {
      __typename: string,
      currentTime: Js.Json.t,
      favoriteColor: Js.Json.t,
      futureTime: Js.Nullable.t(Js.Json.t),
      nullableColor: Js.Nullable.t(Js.Json.t),
    };
    type t = {customFields: t_customFields};
    type t_variables = unit;
  };
  type t_customFields = {
    __typename: string,
    currentTime: Js.Json.t,
    favoriteColor: Js.Json.t,
    futureTime: option(Js.Json.t),
    nullableColor: option(Color.t),
  };
  type t = {customFields: t_customFields};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\ncustomFields  {\\n__typename  \\ncurrentTime  \\nfavoriteColor  \\nfutureTime  \\nnullableColor  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      customFields: {
        let value = (value: Raw.t).customFields;
        (
          {
            __typename: {
              let value = (value: Raw.t_customFields).__typename;
              value;
            },
            currentTime: {
              let value = (value: Raw.t_customFields).currentTime;
              value;
            },
            favoriteColor: {
              let value = (value: Raw.t_customFields).favoriteColor;
              value;
            },
            futureTime: {
              let value = (value: Raw.t_customFields).futureTime;
              switch (Js.toOption(value)) {
              | Some(value) => Some(value)
              | None => None
              };
            },
            nullableColor: {
              let value = (value: Raw.t_customFields).nullableColor;
              switch (Js.toOption(value)) {
              | Some(value) => Some(Color.parse(value))
              | None => None
              };
            },
          }: t_customFields
        );
      },
    }: t
  );
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    {
      let customFields = {
        let value = (value: t).customFields;
        (
          {
            let nullableColor = {
              let value = (value: t_customFields).nullableColor;
              switch (value) {
              | Some(value) => Js.Nullable.return(Color.serialize(value))
              | None => Js.Nullable.null
              };
            }
            and futureTime = {
              let value = (value: t_customFields).futureTime;
              switch (value) {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              };
            }
            and favoriteColor = {
              let value = (value: t_customFields).favoriteColor;
              value;
            }
            and currentTime = {
              let value = (value: t_customFields).currentTime;
              value;
            }
            and __typename = {
              let value = (value: t_customFields).__typename;
              value;
            };
            {
              __typename,
              currentTime,
              favoriteColor,
              futureTime,
              nullableColor,
            };
          }: Raw.t_customFields
        );
      };
      {customFields: customFields};
    }: Raw.t
  );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

