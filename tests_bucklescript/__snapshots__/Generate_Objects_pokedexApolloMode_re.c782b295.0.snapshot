Generate Objects › pokedexApolloMode.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  module Raw: {
    type t_pokemon = {
      .
      \"id\": string,
      \"name\": Js.Nullable.t(string),
    };
    type t = {. \"pokemon\": Js.Nullable.t(t_pokemon)};
    type t_variables = unit;
  };
  type t_pokemon = {
    .
    \"id\": string,
    \"name\": option(string),
  };
  type t = {. \"pokemon\": option(t_pokemon)};
  type t_variables = unit;
  let query: string;
  let parse: Raw.t => t;
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_pokemon = {
      .
      \"id\": string,
      \"name\": Js.Nullable.t(string),
    };
    type t = {. \"pokemon\": Js.Nullable.t(t_pokemon)};
    type t_variables = unit;
  };
  type t_pokemon = {
    .
    \"id\": string,
    \"name\": option(string),
  };
  type t = {. \"pokemon\": option(t_pokemon)};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\npokemon(name: \\\"Pikachu\\\")  {\\nid  \\nname  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let pokemon = {
      let value = value##pokemon;
      switch (Js.toOption(value)) {
      | Some(value) =>
        Some(
          {
            let name = {
              let value = value##name;
              switch (Js.toOption(value)) {
              | Some(value) => Some(value)
              | None => None
              };
            }
            and id = {
              let value = value##id;
              value;
            };
            {\"id\": id, \"name\": name};
          },
        )
      | None => None
      };
    };
    {\"pokemon\": pokemon};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let pokemon = {
      let value = value##pokemon;
      switch (value) {
      | Some(value) =>
        Js.Nullable.return(
          {
            let name = {
              let value = value##name;
              switch (value) {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              };
            }
            and id = {
              let value = value##id;
              value;
            };
            {\"id\": id, \"name\": name};
          },
        )
      | None => Js.Nullable.null
      };
    };
    {\"pokemon\": pokemon};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

