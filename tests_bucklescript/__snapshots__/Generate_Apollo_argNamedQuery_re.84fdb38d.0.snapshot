Generate Apollo › argNamedQuery.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  module Raw: {
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
  };
  type t = {argNamedQuery: int};
  type t_variables = {query: int};
  let query: string;
  let parse: Raw.t => t;
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let makeVariables: (~query: int, unit) => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
  };
  type t = {argNamedQuery: int};
  type t_variables = {query: int};
  /**The GraphQL query string*/
  let query = \"query ($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      argNamedQuery: {
        let value = (value: Raw.t).argNamedQuery;
        value;
      },
    }: t
  );
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    {
      let argNamedQuery = {
        let value = (value: t).argNamedQuery;
        value;
      };
      {argNamedQuery: argNamedQuery};
    }: Raw.t
  );
  let serializeVariables: t_variables => Raw.t_variables =
    inp => {query: (a => a)((inp: t_variables).query)};
  let makeVariables = (~query, ()): t_variables => {query: query};
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type nonrec _graphql_query_82;
    /**Variable **$query** has the following graphql type:

```
Int!
```*/
    let _graphql_query_82: _graphql_query_82 = Obj.magic(0);
    type nonrec _graphql_query_75;
    /**Argument **query** on field **argNamedQuery** has the following graphql type:

```
Int!
```*/
    let _graphql_query_75: _graphql_query_75 = Obj.magic(0);
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module MultipleQueryWithSameVarName = {
  module Query1: {
    module Raw: {
      type t = {argNamedQuery: int};
      type t_variables = {query: int};
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    let query: string;
    let parse: Raw.t => t;
    let serialize: t => Raw.t;
    let serializeVariables: t_variables => Raw.t_variables;
    let makeVariables: (~query: int, unit) => t_variables;
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32\"];
    module Raw = {
      type t = {argNamedQuery: int};
      type t_variables = {query: int};
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    /**The GraphQL query string*/
    let query = \"query Query1($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\";
    /**Parse the JSON GraphQL data to ReasonML data types*/
    let parse = (value: Raw.t): t => (
      {
        argNamedQuery: {
          let value = (value: Raw.t).argNamedQuery;
          value;
        },
      }: t
    );
    /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
    let serialize = (value: t): Raw.t => (
      {
        let argNamedQuery = {
          let value = (value: t).argNamedQuery;
          value;
        };
        {argNamedQuery: argNamedQuery};
      }: Raw.t
    );
    let serializeVariables: t_variables => Raw.t_variables =
      inp => {query: (a => a)((inp: t_variables).query)};
    let makeVariables = (~query, ()): t_variables => {query: query};
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
    module Z__INTERNAL = {
      type nonrec _graphql_Query1_query_210;
      /**Variable **$query** has the following graphql type:

```
Int!
```*/
      let _graphql_Query1_query_210: _graphql_Query1_query_210 = Obj.magic(0);
      type nonrec _graphql_Query2_query_210;
      /**Variable **$query** has the following graphql type:

```
Int!
```*/
      let _graphql_Query2_query_210: _graphql_Query2_query_210 = Obj.magic(0);
      type nonrec _graphql_query_203;
      /**Argument **query** on field **argNamedQuery** has the following graphql type:

```
Int!
```*/
      let _graphql_query_203: _graphql_query_203 = Obj.magic(0);
      type root = t;
      type nonrec graphql_module;
      /**The contents of this module are automatically generated by graphql-ppx.*/
      let graphql_module: graphql_module = Obj.magic(0);
    };
  };
  module Query2: {
    module Raw: {
      type t = {argNamedQuery: int};
      type t_variables = {query: int};
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    let query: string;
    let parse: Raw.t => t;
    let serialize: t => Raw.t;
    let serializeVariables: t_variables => Raw.t_variables;
    let makeVariables: (~query: int, unit) => t_variables;
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32\"];
    module Raw = {
      type t = {argNamedQuery: int};
      type t_variables = {query: int};
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    /**The GraphQL query string*/
    let query = \"query Query2($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\";
    /**Parse the JSON GraphQL data to ReasonML data types*/
    let parse = (value: Raw.t): t => (
      {
        argNamedQuery: {
          let value = (value: Raw.t).argNamedQuery;
          value;
        },
      }: t
    );
    /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
    let serialize = (value: t): Raw.t => (
      {
        let argNamedQuery = {
          let value = (value: t).argNamedQuery;
          value;
        };
        {argNamedQuery: argNamedQuery};
      }: Raw.t
    );
    let serializeVariables: t_variables => Raw.t_variables =
      inp => {query: (a => a)((inp: t_variables).query)};
    let makeVariables = (~query, ()): t_variables => {query: query};
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
    module Z__INTERNAL = {
      type nonrec _graphql_Query1_query_278;
      /**Variable **$query** has the following graphql type:

```
Int!
```*/
      let _graphql_Query1_query_278: _graphql_Query1_query_278 = Obj.magic(0);
      type nonrec _graphql_Query2_query_278;
      /**Variable **$query** has the following graphql type:

```
Int!
```*/
      let _graphql_Query2_query_278: _graphql_Query2_query_278 = Obj.magic(0);
      type nonrec _graphql_query_271;
      /**Argument **query** on field **argNamedQuery** has the following graphql type:

```
Int!
```*/
      let _graphql_query_271: _graphql_query_271 = Obj.magic(0);
      type root = t;
      type nonrec graphql_module;
      /**The contents of this module are automatically generated by graphql-ppx.*/
      let graphql_module: graphql_module = Obj.magic(0);
    };
  };
};

