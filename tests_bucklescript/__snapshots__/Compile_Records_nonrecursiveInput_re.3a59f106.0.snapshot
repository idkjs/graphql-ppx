Compile Records › nonrecursiveInput.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require(\"bs-platform/lib/js/array.js\");
var Caml_option = require(\"bs-platform/lib/js/caml_option.js\");

var Raw = {};

function parse(value) {
  return {
          nonrecursiveInput: value.nonrecursiveInput
        };
}

function serialize(value) {
  var value$1 = value.nonrecursiveInput;
  return {
          nonrecursiveInput: value$1
        };
}

function serializeInputObjectEmbeddedInput(inp) {
  var a = inp.field;
  return {
          field: a !== undefined ? a : undefined
        };
}

function serializeInputObjectNonrecursiveInput(inp) {
  var a = inp.nullableArray;
  var a$1 = inp.field;
  var a$2 = inp.enum;
  var a$3 = inp.embeddedInput;
  var a$4 = inp.custom;
  return {
          nonNullableField: inp.nonNullableField,
          nullableArray: a !== undefined ? $$Array.map((function (b) {
                    if (b !== undefined) {
                      return b;
                    }
                    
                  }), a) : undefined,
          field: a$1 !== undefined ? a$1 : undefined,
          enum: a$2 !== undefined ? (
              a$2 !== 225952583 ? (
                  a$2 >= 382368628 ? \"SECOND\" : \"FIRST\"
                ) : \"THIRD\"
            ) : undefined,
          embeddedInput: a$3 !== undefined ? $$Array.map((function (b) {
                    if (b !== undefined) {
                      return serializeInputObjectEmbeddedInput(b);
                    }
                    
                  }), a$3) : undefined,
          custom: a$4 !== undefined ? Caml_option.valFromOption(a$4) : undefined
        };
}

function serializeVariables(inp) {
  return {
          arg: serializeInputObjectNonrecursiveInput(inp.arg)
        };
}

function makeVariables(arg, param) {
  return {
          arg: arg
        };
}

function makeInputObjectNonrecursiveInput(nonNullableField, nullableArray, field, $$enum, embeddedInput, custom, param) {
  return {
          nonNullableField: nonNullableField,
          nullableArray: nullableArray,
          field: field,
          enum: $$enum,
          embeddedInput: embeddedInput,
          custom: custom
        };
}

function makeInputObjectEmbeddedInput(field, param) {
  return {
          field: field
        };
}

var Z__INTERNAL = {
  _graphql_arg_99: 0,
  _graphql_arg_94: 0,
  _graphql_NonrecursiveInput_48: 0,
  graphql_module: 0
};

var MyQuery = {
  Raw: Raw,
  query: \"query ($arg: NonrecursiveInput!)  {\\nnonrecursiveInput(arg: $arg)  \\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  serializeInputObjectNonrecursiveInput: serializeInputObjectNonrecursiveInput,
  serializeInputObjectEmbeddedInput: serializeInputObjectEmbeddedInput,
  makeVariables: makeVariables,
  makeInputObjectNonrecursiveInput: makeInputObjectNonrecursiveInput,
  makeInputObjectEmbeddedInput: makeInputObjectEmbeddedInput,
  Z__INTERNAL: Z__INTERNAL
};

var Raw$1 = {};

function parse$1(value) {
  return {
          scalarsInput: value.scalarsInput,
          more: value.more
        };
}

function serialize$1(value) {
  var value$1 = value.more;
  var value$2 = value.scalarsInput;
  return {
          scalarsInput: value$2,
          more: value$1
        };
}

function serializeInputObjectEmbeddedInput$1(inp) {
  var a = inp.field;
  return {
          field: a !== undefined ? a : undefined
        };
}

function serializeInputObjectNonrecursiveInput$1(inp) {
  var a = inp.nullableArray;
  var a$1 = inp.field;
  var a$2 = inp.enum;
  var a$3 = inp.embeddedInput;
  var a$4 = inp.custom;
  return {
          nonNullableField: inp.nonNullableField,
          nullableArray: a !== undefined ? $$Array.map((function (b) {
                    if (b !== undefined) {
                      return b;
                    }
                    
                  }), a) : undefined,
          field: a$1 !== undefined ? a$1 : undefined,
          enum: a$2 !== undefined ? (
              a$2 !== 225952583 ? (
                  a$2 >= 382368628 ? \"SECOND\" : \"FIRST\"
                ) : \"THIRD\"
            ) : undefined,
          embeddedInput: a$3 !== undefined ? $$Array.map((function (b) {
                    if (b !== undefined) {
                      return serializeInputObjectEmbeddedInput$1(b);
                    }
                    
                  }), a$3) : undefined,
          custom: a$4 !== undefined ? Caml_option.valFromOption(a$4) : undefined
        };
}

function serializeVariables$1(inp) {
  return {
          arg: serializeInputObjectNonrecursiveInput$1(inp.arg),
          arg2: serializeInputObjectNonrecursiveInput$1(inp.arg2)
        };
}

function makeVariables$1(arg, arg2, param) {
  return {
          arg: arg,
          arg2: arg2
        };
}

function makeInputObjectNonrecursiveInput$1(nonNullableField, nullableArray, field, $$enum, embeddedInput, custom, param) {
  return {
          nonNullableField: nonNullableField,
          nullableArray: nullableArray,
          field: field,
          enum: $$enum,
          embeddedInput: embeddedInput,
          custom: custom
        };
}

function makeInputObjectEmbeddedInput$1(field, param) {
  return {
          field: field
        };
}

var Z__INTERNAL$1 = {
  _graphql_arg_238: 0,
  _graphql_arg_233: 0,
  _graphql_NonrecursiveInput_167: 0,
  _graphql_NonrecursiveInput_194: 0,
  graphql_module: 0
};

var MyQuery2 = {
  Raw: Raw$1,
  query: \"query ($arg: NonrecursiveInput!, $arg2: NonrecursiveInput!)  {\\nscalarsInput(arg: $arg)  \\nmore: scalarsInput(arg: $arg2)  \\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  serializeInputObjectNonrecursiveInput: serializeInputObjectNonrecursiveInput$1,
  serializeInputObjectEmbeddedInput: serializeInputObjectEmbeddedInput$1,
  makeVariables: makeVariables$1,
  makeInputObjectNonrecursiveInput: makeInputObjectNonrecursiveInput$1,
  makeInputObjectEmbeddedInput: makeInputObjectEmbeddedInput$1,
  Z__INTERNAL: Z__INTERNAL$1
};

exports.MyQuery = MyQuery;
exports.MyQuery2 = MyQuery2;
/* No side effect */

