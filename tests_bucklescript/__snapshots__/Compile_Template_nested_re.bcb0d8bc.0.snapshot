Compile Template › nested.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = (require(\"gql\")`
  query   {
    first: nestedObject  {
      inner  {
        inner  {
          field
        }
      }
    }
    second: nestedObject  {
      inner  {
        inner  {
          f1: field
          f2: field
        }
      }
    }
    let: nestedObject  {
      inner  {
        inner  {
          field
        }
      }
    }
  }
`);

function parse(value) {
  var value$1 = value.first;
  var value$2 = value$1.inner;
  var tmp;
  if (value$2 == null) {
    tmp = undefined;
  } else {
    var value$3 = value$2.inner;
    tmp = {
      inner: !(value$3 == null) ? ({
            field: value$3.field
          }) : undefined
    };
  }
  var value$4 = value.second;
  var value$5 = value$4.inner;
  var tmp$1;
  if (value$5 == null) {
    tmp$1 = undefined;
  } else {
    var value$6 = value$5.inner;
    tmp$1 = {
      inner: !(value$6 == null) ? ({
            f1: value$6.f1,
            f2: value$6.f2
          }) : undefined
    };
  }
  var value$7 = value.let;
  var value$8 = value$7.inner;
  var tmp$2;
  if (value$8 == null) {
    tmp$2 = undefined;
  } else {
    var value$9 = value$8.inner;
    tmp$2 = {
      inner: !(value$9 == null) ? ({
            field: value$9.field
          }) : undefined
    };
  }
  return {
          first: {
            inner: tmp
          },
          second: {
            inner: tmp$1
          },
          let: {
            inner: tmp$2
          }
        };
}

function serialize(value) {
  var value$1 = value.let;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 !== undefined) {
    var value$3 = value$2.inner;
    var inner$1;
    if (value$3 !== undefined) {
      var value$4 = value$3.field;
      inner$1 = {
        field: value$4
      };
    } else {
      inner$1 = null;
    }
    inner = {
      inner: inner$1
    };
  } else {
    inner = null;
  }
  var let_ = {
    inner: inner
  };
  var value$5 = value.second;
  var value$6 = value$5.inner;
  var inner$2;
  if (value$6 !== undefined) {
    var value$7 = value$6.inner;
    var inner$3;
    if (value$7 !== undefined) {
      var value$8 = value$7.f2;
      var value$9 = value$7.f1;
      inner$3 = {
        f1: value$9,
        f2: value$8
      };
    } else {
      inner$3 = null;
    }
    inner$2 = {
      inner: inner$3
    };
  } else {
    inner$2 = null;
  }
  var second = {
    inner: inner$2
  };
  var value$10 = value.first;
  var value$11 = value$10.inner;
  var inner$4;
  if (value$11 !== undefined) {
    var value$12 = value$11.inner;
    var inner$5;
    if (value$12 !== undefined) {
      var value$13 = value$12.field;
      inner$5 = {
        field: value$13
      };
    } else {
      inner$5 = null;
    }
    inner$4 = {
      inner: inner$5
    };
  } else {
    inner$4 = null;
  }
  var first = {
    inner: inner$4
  };
  return {
          first: first,
          second: second,
          let: let_
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

exports.MyQuery = MyQuery;
/* query Not a pure module */

