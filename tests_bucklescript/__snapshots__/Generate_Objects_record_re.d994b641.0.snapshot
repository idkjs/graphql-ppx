Generate Objects › record.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
type scalars = {
  __typename: string,
  string,
  int,
};

type dog = {
  __typename: string,
  name: string,
  barkVolume: float,
};

type oneFieldQuery = {nullableString: option(string)};
module MyQuery = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_variousScalars = {
      .
      \"__typename\": string,
      \"string\": string,
      \"int\": int,
    };
    type t = {. \"variousScalars\": t_variousScalars};
    type t_variables = unit;
  };
  type t = {. \"variousScalars\": scalars};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nvariousScalars  {\\n__typename  \\nstring  \\nint  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let variousScalars = {
      let value = value##variousScalars;
      (
        {
          let int = {
            let value = value##int;
            value;
          }
          and string = {
            let value = value##string;
            value;
          }
          and __typename = {
            let value = value##__typename;
            value;
          };
          {__typename, string, int};
        }: scalars
      );
    };
    {\"variousScalars\": variousScalars};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let variousScalars = {
      let value = value##variousScalars;
      let int = {
        let value = (value: scalars).int;
        value;
      }
      and string = {
        let value = (value: scalars).string;
        value;
      }
      and __typename = {
        let value = (value: scalars).__typename;
        value;
      };
      {\"__typename\": __typename, \"string\": string, \"int\": int};
    };
    {\"variousScalars\": variousScalars};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module OneFieldQuery = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_variousScalars = {. \"nullableString\": Js.Nullable.t(string)};
    type t = {. \"variousScalars\": t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {nullableString: option(string)};
  type t = {. \"variousScalars\": t_variousScalars};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nvariousScalars  {\\nnullableString  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let variousScalars = {
      let value = value##variousScalars;
      (
        {
          let nullableString = {
            let value = value##nullableString;
            switch (Js.toOption(value)) {
            | Some(value) => Some(value)
            | None => None
            };
          };
          {nullableString: nullableString};
        }: t_variousScalars
      );
    };
    {\"variousScalars\": variousScalars};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let variousScalars = {
      let value = value##variousScalars;
      let nullableString = {
        let value = (value: t_variousScalars).nullableString;
        switch (value) {
        | Some(value) => Js.Nullable.return(value)
        | None => Js.Nullable.null
        };
      };
      {\"nullableString\": nullableString};
    };
    {\"variousScalars\": variousScalars};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module OneFieldQueryWithTypename = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_variousScalars = {
      .
      \"__typename\": string,
      \"nullableString\": Js.Nullable.t(string),
    };
    type t = {. \"variousScalars\": t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {
    .
    \"__typename\": string,
    \"nullableString\": option(string),
  };
  type t = {. \"variousScalars\": t_variousScalars};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nvariousScalars  {\\n__typename  \\nnullableString  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let variousScalars = {
      let value = value##variousScalars;
      let nullableString = {
        let value = value##nullableString;
        switch (Js.toOption(value)) {
        | Some(value) => Some(value)
        | None => None
        };
      }
      and __typename = {
        let value = value##__typename;
        value;
      };
      {\"__typename\": __typename, \"nullableString\": nullableString};
    };
    {\"variousScalars\": variousScalars};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let variousScalars = {
      let value = value##variousScalars;
      let nullableString = {
        let value = value##nullableString;
        switch (value) {
        | Some(value) => Js.Nullable.return(value)
        | None => Js.Nullable.null
        };
      }
      and __typename = {
        let value = value##__typename;
        value;
      };
      {\"__typename\": __typename, \"nullableString\": nullableString};
    };
    {\"variousScalars\": variousScalars};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module ExternalFragmentQuery = {
  module Fragment = {
    [@ocaml.warning \"-32\"];
    module Raw = {
      type t = {
        .
        \"string\": string,
        \"int\": int,
      };
      type nonrec t_VariousScalars = t;
    };
    type t = {
      string,
      int,
    };
    type nonrec t_VariousScalars = t;
    /**The GraphQL query string*/
    let query = \"fragment Fragment on VariousScalars   {\\nstring  \\nint  \\n}\\n\";
    /**Parse the JSON GraphQL data to ReasonML data types*/
    let parse = (value: Raw.t): t => (
      {
        let int = {
          let value = value##int;
          value;
        }
        and string = {
          let value = value##string;
          value;
        };
        {string, int};
      }: t
    );

    let verifyArgsAndParse =
        (~fragmentName as _Fragment: [ | `Fragment], value: Raw.t) =>
      parse(value);
    /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
    let serialize = (value: t): Raw.t => {
      let int = {
        let value = (value: t).int;
        value;
      }
      and string = {
        let value = (value: t).string;
        value;
      };
      {\"string\": string, \"int\": int};
    };
    let verifyName =
      fun
      | `Fragment => ();
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    module Z__INTERNAL = {
      type root = t;
      type nonrec graphql;
      /**```
VariousScalars {
  nullableString: String
  string: String!
  nullableInt: Int
  int: Int!
  nullableFloat: Float
  float: Float!
  nullableBoolean: Boolean
  boolean: Boolean!
  nullableID: ID
  id: ID!
}
```*/
      let graphql: graphql = Obj.magic(0);
      type nonrec graphql_module;
      /**The contents of this module are automatically generated by graphql-ppx.*/
      let graphql_module: graphql_module = Obj.magic(0);
    };
  };
  module Untitled1 = {
    [@ocaml.warning \"-32\"];
    module Raw = {
      type t = {. \"variousScalars\": Fragment.Raw.t};
      type t_variables = unit;
    };
    type t = {. \"variousScalars\": Fragment.t};
    type t_variables = unit;
    /**The GraphQL query string*/
    let query =
      \"query   {\\nvariousScalars  {\\n...Fragment   \\n}\\n\\n}\\n\"
      ++ Fragment.query;
    /**Parse the JSON GraphQL data to ReasonML data types*/
    let parse = (value: Raw.t): t => {
      let variousScalars = {
        let value = value##variousScalars;

        Fragment.verifyArgsAndParse(~fragmentName=`Fragment, value);
      };
      {\"variousScalars\": variousScalars};
    };
    /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
    let serialize = (value: t): Raw.t => {
      let variousScalars = {
        let value = value##variousScalars;
        Fragment.serialize(value);
      };
      {\"variousScalars\": variousScalars};
    };
    let serializeVariables = () => ();
    let makeVariables = () => ();
    let makeDefaultVariables = () => makeVariables();
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
    module Z__INTERNAL = {
      type root = t;
      type nonrec graphql_module;
      /**The contents of this module are automatically generated by graphql-ppx.*/
      let graphql_module: graphql_module = Obj.magic(0);
    };
  };
};
module InlineFragmentQuery = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_dogOrHuman_Dog = {
      .
      \"__typename\": string,
      \"name\": string,
      \"barkVolume\": float,
    };
    type t_dogOrHuman;
    type t = {. \"dogOrHuman\": t_dogOrHuman};
    type t_variables = unit;
  };
  type t_dogOrHuman_Dog = {
    __typename: string,
    name: string,
    barkVolume: float,
  };
  type t_dogOrHuman = [
    | `FutureAddedValue(Js.Json.t)
    | `Dog(t_dogOrHuman_Dog)
  ];
  type t = {. \"dogOrHuman\": t_dogOrHuman};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      let typename: string =
        Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
      (
        switch (typename) {
        | \"Dog\" =>
          `Dog(
            {
              let value: Raw.t_dogOrHuman_Dog = Obj.magic(value);
              (
                {
                  let barkVolume = {
                    let value = value##barkVolume;
                    value;
                  }
                  and name = {
                    let value = value##name;
                    value;
                  }
                  and __typename = {
                    let value = value##__typename;
                    value;
                  };
                  {__typename, name, barkVolume};
                }: t_dogOrHuman_Dog
              );
            },
          )
        | _ => `FutureAddedValue(Obj.magic(value): Js.Json.t)
        }: t_dogOrHuman
      );
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      switch (value) {
      | `Dog(value) => (
          Obj.magic(
            {
              let barkVolume = {
                let value = (value: t_dogOrHuman_Dog).barkVolume;
                value;
              }
              and name = {
                let value = (value: t_dogOrHuman_Dog).name;
                value;
              }
              and __typename = {
                let value = (value: t_dogOrHuman_Dog).__typename;
                value;
              };
              {\"__typename\": \"Dog\", \"name\": name, \"barkVolume\": barkVolume};
            },
          ): Raw.t_dogOrHuman
        )
      | `FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
      };
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module UnionExternalFragmentQuery = {
  module DogFragment = {
    [@ocaml.warning \"-32\"];
    module Raw = {
      type t = {
        .
        \"__typename\": string,
        \"name\": string,
        \"barkVolume\": float,
      };
      type nonrec t_Dog = t;
    };
    type t = {
      __typename: string,
      name: string,
      barkVolume: float,
    };
    type nonrec t_Dog = t;
    /**The GraphQL query string*/
    let query = \"fragment DogFragment on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\";
    /**Parse the JSON GraphQL data to ReasonML data types*/
    let parse = (value: Raw.t): t => (
      {
        let barkVolume = {
          let value = value##barkVolume;
          value;
        }
        and name = {
          let value = value##name;
          value;
        }
        and __typename = {
          let value = value##__typename;
          value;
        };
        {__typename, name, barkVolume};
      }: t
    );

    let verifyArgsAndParse =
        (~fragmentName as _DogFragment: [ | `DogFragment], value: Raw.t) =>
      parse(value);
    /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
    let serialize = (value: t): Raw.t => {
      let barkVolume = {
        let value = (value: t).barkVolume;
        value;
      }
      and name = {
        let value = (value: t).name;
        value;
      }
      and __typename = {
        let value = (value: t).__typename;
        value;
      };
      {\"__typename\": __typename, \"name\": name, \"barkVolume\": barkVolume};
    };
    let verifyName =
      fun
      | `DogFragment => ();
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    module Z__INTERNAL = {
      type root = t;
      type nonrec graphql;
      /**```
Dog {
  name: String!
  barkVolume: Float!
}
```*/
      let graphql: graphql = Obj.magic(0);
      type nonrec graphql_module;
      /**The contents of this module are automatically generated by graphql-ppx.*/
      let graphql_module: graphql_module = Obj.magic(0);
    };
  };
  module Untitled1 = {
    [@ocaml.warning \"-32\"];
    module Raw = {
      type t_dogOrHuman;
      type t = {. \"dogOrHuman\": t_dogOrHuman};
      type t_variables = unit;
    };
    type t_dogOrHuman = [
      | `FutureAddedValue(Js.Json.t)
      | `Dog(DogFragment.t)
    ];
    type t = {. \"dogOrHuman\": t_dogOrHuman};
    type t_variables = unit;
    /**The GraphQL query string*/
    let query =
      \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n...DogFragment   \\n}\\n\\n}\\n\\n}\\n\"
      ++ DogFragment.query;
    /**Parse the JSON GraphQL data to ReasonML data types*/
    let parse = (value: Raw.t): t => {
      let dogOrHuman = {
        let value = value##dogOrHuman;
        let typename: string =
          Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
        (
          switch (typename) {
          | \"Dog\" =>
            `Dog(
              {
                let value: DogFragment.Raw.t = Obj.magic(value);

                DogFragment.verifyArgsAndParse(
                  ~fragmentName=`DogFragment,
                  value,
                );
              },
            )
          | _ => `FutureAddedValue(Obj.magic(value): Js.Json.t)
          }: t_dogOrHuman
        );
      };
      {\"dogOrHuman\": dogOrHuman};
    };
    /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
    let serialize = (value: t): Raw.t => {
      let dogOrHuman = {
        let value = value##dogOrHuman;
        switch (value) {
        | `Dog(value) => (
            Obj.magic(DogFragment.serialize(value)): Raw.t_dogOrHuman
          )
        | `FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
        };
      };
      {\"dogOrHuman\": dogOrHuman};
    };
    let serializeVariables = () => ();
    let makeVariables = () => ();
    let makeDefaultVariables = () => makeVariables();
    external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Js.Json.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
    module Z__INTERNAL = {
      type root = t;
      type nonrec graphql_module;
      /**The contents of this module are automatically generated by graphql-ppx.*/
      let graphql_module: graphql_module = Obj.magic(0);
    };
  };
};

