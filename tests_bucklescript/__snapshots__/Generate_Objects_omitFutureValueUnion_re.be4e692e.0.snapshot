Generate Objects › omitFutureValueUnion.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module Normal = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_dogOrHuman_Dog = {
      .
      \"__typename\": string,
      \"name\": string,
      \"barkVolume\": float,
    };
    type t_dogOrHuman_Human = {
      .
      \"__typename\": string,
      \"name\": string,
    };
    type t_dogOrHuman;
    type t = {. \"dogOrHuman\": t_dogOrHuman};
    type t_variables = unit;
  };
  type t_dogOrHuman_Dog = {
    .
    \"name\": string,
    \"barkVolume\": float,
  };
  type t_dogOrHuman_Human = {. \"name\": string};
  type t_dogOrHuman = [
    | `FutureAddedValue(Js.Json.t)
    | `Dog(t_dogOrHuman_Dog)
    | `Human(t_dogOrHuman_Human)
  ];
  type t = {. \"dogOrHuman\": t_dogOrHuman};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\nname  \\nbarkVolume  \\n}\\n\\n...on Human   {\\nname  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      let typename: string =
        Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
      (
        switch (typename) {
        | \"Dog\" =>
          `Dog(
            {
              let value: Raw.t_dogOrHuman_Dog = Obj.magic(value);
              let barkVolume = {
                let value = value##barkVolume;
                value;
              }
              and name = {
                let value = value##name;
                value;
              };
              {\"name\": name, \"barkVolume\": barkVolume};
            },
          )
        | \"Human\" =>
          `Human(
            {
              let value: Raw.t_dogOrHuman_Human = Obj.magic(value);
              let name = {
                let value = value##name;
                value;
              };
              {\"name\": name};
            },
          )
        | _ => `FutureAddedValue(Obj.magic(value): Js.Json.t)
        }: t_dogOrHuman
      );
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      switch (value) {
      | `Dog(value) => (
          Obj.magic(
            {
              let barkVolume = {
                let value = value##barkVolume;
                value;
              }
              and name = {
                let value = value##name;
                value;
              };
              {\"__typename\": \"Dog\", \"name\": name, \"barkVolume\": barkVolume};
            },
          ): Raw.t_dogOrHuman
        )
      | `Human(value) => (
          Obj.magic(
            {
              let name = {
                let value = value##name;
                value;
              };
              {\"__typename\": \"Human\", \"name\": name};
            },
          ): Raw.t_dogOrHuman
        )
      | `FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
      };
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module ByConfig = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_dogOrHuman_Dog = {
      .
      \"__typename\": string,
      \"name\": string,
      \"barkVolume\": float,
    };
    type t_dogOrHuman_Human = {
      .
      \"__typename\": string,
      \"name\": string,
    };
    type t_dogOrHuman;
    type t = {. \"dogOrHuman\": t_dogOrHuman};
    type t_variables = unit;
  };
  type t_dogOrHuman_Dog = {
    .
    \"name\": string,
    \"barkVolume\": float,
  };
  type t_dogOrHuman_Human = {. \"name\": string};
  type t_dogOrHuman = [
    | `Dog(t_dogOrHuman_Dog)
    | `Human(t_dogOrHuman_Human)
  ];
  type t = {. \"dogOrHuman\": t_dogOrHuman};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\nname  \\nbarkVolume  \\n}\\n\\n...on Human   {\\nname  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      let typename: string =
        Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
      (
        switch (typename) {
        | \"Dog\" =>
          `Dog(
            {
              let value: Raw.t_dogOrHuman_Dog = Obj.magic(value);
              let barkVolume = {
                let value = value##barkVolume;
                value;
              }
              and name = {
                let value = value##name;
                value;
              };
              {\"name\": name, \"barkVolume\": barkVolume};
            },
          )
        | \"Human\" =>
          `Human(
            {
              let value: Raw.t_dogOrHuman_Human = Obj.magic(value);
              let name = {
                let value = value##name;
                value;
              };
              {\"name\": name};
            },
          )
        | _ => raise(Not_found)
        }: t_dogOrHuman
      );
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      switch (value) {
      | `Dog(value) => (
          Obj.magic(
            {
              let barkVolume = {
                let value = value##barkVolume;
                value;
              }
              and name = {
                let value = value##name;
                value;
              };
              {\"__typename\": \"Dog\", \"name\": name, \"barkVolume\": barkVolume};
            },
          ): Raw.t_dogOrHuman
        )
      | `Human(value) => (
          Obj.magic(
            {
              let name = {
                let value = value##name;
                value;
              };
              {\"__typename\": \"Human\", \"name\": name};
            },
          ): Raw.t_dogOrHuman
        )
      };
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module ByDirective = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_dogOrHuman_Dog = {
      .
      \"__typename\": string,
      \"name\": string,
      \"barkVolume\": float,
    };
    type t_dogOrHuman_Human = {
      .
      \"__typename\": string,
      \"name\": string,
    };
    type t_dogOrHuman;
    type t = {. \"dogOrHuman\": t_dogOrHuman};
    type t_variables = unit;
  };
  type t_dogOrHuman_Dog = {
    .
    \"name\": string,
    \"barkVolume\": float,
  };
  type t_dogOrHuman_Human = {. \"name\": string};
  type t_dogOrHuman = [
    | `Dog(t_dogOrHuman_Dog)
    | `Human(t_dogOrHuman_Human)
  ];
  type t = {. \"dogOrHuman\": t_dogOrHuman};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\nname  \\nbarkVolume  \\n}\\n\\n...on Human   {\\nname  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      let typename: string =
        Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
      (
        switch (typename) {
        | \"Dog\" =>
          `Dog(
            {
              let value: Raw.t_dogOrHuman_Dog = Obj.magic(value);
              let barkVolume = {
                let value = value##barkVolume;
                value;
              }
              and name = {
                let value = value##name;
                value;
              };
              {\"name\": name, \"barkVolume\": barkVolume};
            },
          )
        | \"Human\" =>
          `Human(
            {
              let value: Raw.t_dogOrHuman_Human = Obj.magic(value);
              let name = {
                let value = value##name;
                value;
              };
              {\"name\": name};
            },
          )
        | _ => raise(Not_found)
        }: t_dogOrHuman
      );
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let dogOrHuman = {
      let value = value##dogOrHuman;
      switch (value) {
      | `Dog(value) => (
          Obj.magic(
            {
              let barkVolume = {
                let value = value##barkVolume;
                value;
              }
              and name = {
                let value = value##name;
                value;
              };
              {\"__typename\": \"Dog\", \"name\": name, \"barkVolume\": barkVolume};
            },
          ): Raw.t_dogOrHuman
        )
      | `Human(value) => (
          Obj.magic(
            {
              let name = {
                let value = value##name;
                value;
              };
              {\"__typename\": \"Human\", \"name\": name};
            },
          ): Raw.t_dogOrHuman
        )
      };
    };
    {\"dogOrHuman\": dogOrHuman};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

