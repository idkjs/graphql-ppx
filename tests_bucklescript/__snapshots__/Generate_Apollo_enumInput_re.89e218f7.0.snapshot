Generate Apollo › enumInput.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  module Raw: {
    type t = {enumInput: string};
    type t_variables = {arg: string};
  };
  type t = {enumInput: string};
  type t_variables = {arg: [ | `FIRST | `SECOND | `THIRD]};
  let query: string;
  let parse: Raw.t => t;
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let makeVariables:
    (~arg: [ | `FIRST | `SECOND | `THIRD], unit) => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = {enumInput: string};
    type t_variables = {arg: string};
  };
  type t = {enumInput: string};
  type t_variables = {arg: [ | `FIRST | `SECOND | `THIRD]};
  /**The GraphQL query string*/
  let query = \"query ($arg: SampleField!)  {\\nenumInput(arg: $arg)  \\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      enumInput: {
        let value = (value: Raw.t).enumInput;
        value;
      },
    }: t
  );
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    {
      let enumInput = {
        let value = (value: t).enumInput;
        value;
      };
      {enumInput: enumInput};
    }: Raw.t
  );
  let serializeVariables: t_variables => Raw.t_variables =
    inp => {
      arg:
        (
          a =>
            switch (a) {
            | `FIRST => \"FIRST\"
            | `SECOND => \"SECOND\"
            | `THIRD => \"THIRD\"
            }
        )(
          (inp: t_variables).arg,
        ),
    };
  let makeVariables = (~arg, ()): t_variables => {arg: arg};
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type nonrec _graphql_arg_82;
    /**Variable **$arg** has the following graphql type:

```
SampleField {
  FIRST
  SECOND
  THIRD
}!
```*/
    let _graphql_arg_82: _graphql_arg_82 = Obj.magic(0);
    type nonrec _graphql_arg_77;
    /**Argument **arg** on field **enumInput** has the following graphql type:

```
SampleField {
  FIRST
  SECOND
  THIRD
}!
```*/
    let _graphql_arg_77: _graphql_arg_77 = Obj.magic(0);
    type root = t;
    type nonrec _graphql_SampleField_47;
    /**```
SampleField {
  FIRST
  SECOND
  THIRD
}
```*/
    let _graphql_SampleField_47: _graphql_SampleField_47 = Obj.magic(0);
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

