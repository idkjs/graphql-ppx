Generate Records › module_type.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {type t;} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_variousScalars = {string};
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {string};
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nvariousScalars  {\\nstring  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      variousScalars: {
        let value = (value: Raw.t).variousScalars;
        (
          {
            string: {
              let value = (value: Raw.t_variousScalars).string;
              value;
            },
          }: t_variousScalars
        );
      },
    }: t
  );
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    {
      let variousScalars = {
        let value = (value: t).variousScalars;
        (
          {
            let string = {
              let value = (value: t_variousScalars).string;
              value;
            };
            {string: string};
          }: Raw.t_variousScalars
        );
      };
      {variousScalars: variousScalars};
    }: Raw.t
  );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module MyQuery2: {
  type t_variousScalars;
  type t = {variousScalars: t_variousScalars};
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_variousScalars = {string};
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {string};
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nvariousScalars  {\\nstring  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      variousScalars: {
        let value = (value: Raw.t).variousScalars;
        (
          {
            string: {
              let value = (value: Raw.t_variousScalars).string;
              value;
            },
          }: t_variousScalars
        );
      },
    }: t
  );
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    {
      let variousScalars = {
        let value = (value: t).variousScalars;
        (
          {
            let string = {
              let value = (value: t_variousScalars).string;
              value;
            };
            {string: string};
          }: Raw.t_variousScalars
        );
      };
      {variousScalars: variousScalars};
    }: Raw.t
  );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

module rec MyQueryRecursive: {
  module Raw: {
    type t_nestedObject_inner_inner = {field: string};
    type t_nestedObject_inner = {
      inner: Js.Nullable.t(t_nestedObject_inner_inner),
    };
    type t_nestedObject = {inner: Js.Nullable.t(t_nestedObject_inner)};
    type t = {nestedObject: t_nestedObject};
    type t_variables = unit;
  };
  type t_nestedObject_inner_inner = {field: string};
  type t_nestedObject_inner = {inner: option(t_nestedObject_inner_inner)};
  type t_nestedObject = {inner: option(t_nestedObject_inner)};
  type t = {nestedObject: VariousScalars.t};
  type t_variables = unit;
  let query: string;
  let parse: Raw.t => t;
  let serialize: t => Raw.t;
  let serializeVariables: unit => unit;
  let makeVariables: unit => unit;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_nestedObject_inner_inner = {field: string};
    type t_nestedObject_inner = {
      inner: Js.Nullable.t(t_nestedObject_inner_inner),
    };
    type t_nestedObject = {inner: Js.Nullable.t(t_nestedObject_inner)};
    type t = {nestedObject: t_nestedObject};
    type t_variables = unit;
  };
  type t_nestedObject_inner_inner = {field: string};
  type t_nestedObject_inner = {inner: option(t_nestedObject_inner_inner)};
  type t_nestedObject = {inner: option(t_nestedObject_inner)};
  type t = {nestedObject: VariousScalars.t};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nnestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      nestedObject: {
        let value = (value: Raw.t).nestedObject;
        VariousScalars.parse(
          {
            inner: {
              let value = (value: Raw.t_nestedObject).inner;
              switch (Js.toOption(value)) {
              | Some(value) =>
                Some(
                  {
                    inner: {
                      let value = (value: Raw.t_nestedObject_inner).inner;
                      switch (Js.toOption(value)) {
                      | Some(value) =>
                        Some(
                          {
                            field: {
                              let value =
                                (value: Raw.t_nestedObject_inner_inner).field;
                              value;
                            },
                          }: t_nestedObject_inner_inner,
                        )
                      | None => None
                      };
                    },
                  }: t_nestedObject_inner,
                )
              | None => None
              };
            },
          }: t_nestedObject,
        );
      },
    }: t
  );
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    {
      let nestedObject = {
        let value = (value: t).nestedObject;
        let value = VariousScalars.serialize(value);
        (
          {
            let inner = {
              let value = (value: t_nestedObject).inner;
              switch (value) {
              | Some(value) =>
                Js.Nullable.return(
                  {
                    let inner = {
                      let value = (value: t_nestedObject_inner).inner;
                      switch (value) {
                      | Some(value) =>
                        Js.Nullable.return(
                          {
                            let field = {
                              let value =
                                (value: t_nestedObject_inner_inner).field;
                              value;
                            };
                            {field: field};
                          }: Raw.t_nestedObject_inner_inner,
                        )
                      | None => Js.Nullable.null
                      };
                    };
                    {inner: inner};
                  }: Raw.t_nestedObject_inner,
                )
              | None => Js.Nullable.null
              };
            };
            {inner: inner};
          }: Raw.t_nestedObject
        );
      };
      {nestedObject: nestedObject};
    }: Raw.t
  );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
}

and VariousScalars: {
  type t;
  let parse: MyQueryRecursive.t_nestedObject => t;
  let serialize: t => MyQueryRecursive.t_nestedObject;
} = {
  type t = {otherInner: option(MyQueryRecursive.t_nestedObject_inner)};
  let parse = (nestedObject: MyQueryRecursive.t_nestedObject) => {
    otherInner: nestedObject.inner,
  };
  let serialize: t => MyQueryRecursive.t_nestedObject =
    t => {inner: t.otherInner};
};

