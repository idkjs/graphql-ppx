Generate Objects › mutationWithArgs.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = {. \"optionalInputArgs\": string};
    type t_variables = {. \"required\": string};
  };
  type t = {. \"optionalInputArgs\": string};
  type t_variables = {. \"required\": string};
  /**The GraphQL query string*/
  let query = \"mutation MyMutation($required: String!)  {\\noptionalInputArgs(required: $required, anotherRequired: \\\"val\\\")  \\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let optionalInputArgs = {
      let value = value##optionalInputArgs;
      value;
    };
    {\"optionalInputArgs\": optionalInputArgs};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let optionalInputArgs = {
      let value = value##optionalInputArgs;
      value;
    };
    {\"optionalInputArgs\": optionalInputArgs};
  };
  let serializeVariables: t_variables => Raw.t_variables =
    inp => {\"required\": (a => a)(inp##required)};
  let makeVariables = (~required, ()): t_variables => {\"required\": required};
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

