Generate Objects › mutation.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_mutationWithError_value = {. \"stringField\": string};
    type t_mutationWithError_errors_field = string;
    type t_mutationWithError_errors = {
      .
      \"field\": t_mutationWithError_errors_field,
      \"message\": string,
    };
    type t_mutationWithError = {
      .
      \"value\": Js.Nullable.t(t_mutationWithError_value),
      \"errors\": Js.Nullable.t(array(t_mutationWithError_errors)),
    };
    type t = {. \"mutationWithError\": t_mutationWithError};
    type t_variables = unit;
  };
  type t_mutationWithError_value = {. \"stringField\": string};
  type t_mutationWithError_errors_field = [
    | `FutureAddedValue(string)
    | `FIRST
    | `SECOND
    | `THIRD
  ];
  type t_mutationWithError_errors = {
    .
    \"field\": t_mutationWithError_errors_field,
    \"message\": string,
  };
  type t_mutationWithError = {
    .
    \"value\": option(t_mutationWithError_value),
    \"errors\": option(array(t_mutationWithError_errors)),
  };
  type t = {. \"mutationWithError\": t_mutationWithError};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"mutation   {\\nmutationWithError  {\\nvalue  {\\nstringField  \\n}\\n\\nerrors  {\\nfield  \\nmessage  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let mutationWithError = {
      let value = value##mutationWithError;
      let errors = {
        let value = value##errors;
        switch (Js.toOption(value)) {
        | Some(value) =>
          Some(
            value
            |> Js.Array.map(value =>
                 let message = {
                   let value = value##message;
                   value;
                 }
                 and field = {
                   let value = value##field;
                   switch (Obj.magic(value: string)) {
                   | \"FIRST\" => `FIRST
                   | \"SECOND\" => `SECOND
                   | \"THIRD\" => `THIRD
                   | other => `FutureAddedValue(other)
                   };
                 };
                 {\"field\": field, \"message\": message};
               ),
          )
        | None => None
        };
      }
      and value = {
        let value = value##value;
        switch (Js.toOption(value)) {
        | Some(value) =>
          Some(
            {
              let stringField = {
                let value = value##stringField;
                value;
              };
              {\"stringField\": stringField};
            },
          )
        | None => None
        };
      };
      {\"value\": value, \"errors\": errors};
    };
    {\"mutationWithError\": mutationWithError};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let mutationWithError = {
      let value = value##mutationWithError;
      let errors = {
        let value = value##errors;
        switch (value) {
        | Some(value) =>
          Js.Nullable.return(
            value
            |> Js.Array.map(value =>
                 let message = {
                   let value = value##message;
                   value;
                 }
                 and field = {
                   let value = value##field;
                   switch (value) {
                   | `FIRST => \"FIRST\"
                   | `SECOND => \"SECOND\"
                   | `THIRD => \"THIRD\"
                   | `FutureAddedValue(other) => other
                   };
                 };
                 {\"field\": field, \"message\": message};
               ),
          )
        | None => Js.Nullable.null
        };
      }
      and value = {
        let value = value##value;
        switch (value) {
        | Some(value) =>
          Js.Nullable.return(
            {
              let stringField = {
                let value = value##stringField;
                value;
              };
              {\"stringField\": stringField};
            },
          )
        | None => Js.Nullable.null
        };
      };
      {\"value\": value, \"errors\": errors};
    };
    {\"mutationWithError\": mutationWithError};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

