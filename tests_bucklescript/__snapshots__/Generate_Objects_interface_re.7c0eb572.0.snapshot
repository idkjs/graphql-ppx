Generate Objects › interface.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module GraphQL_PPX = {
  let deepMerge = (json1, _) => json1;
};
module QueryWithOnlyFragments = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_users_User_AnonymousUser = {
      .
      \"__typename\": string,
      \"id\": string,
      \"anonymousId\": int,
    };
    type t_users_User_AdminUser = {
      .
      \"__typename\": string,
      \"id\": string,
      \"name\": string,
    };
    type t_users_User;
    type t = {. \"users\": array(t_users_User)};
    type t_variables = unit;
  };
  type t_users_User_AnonymousUser = {
    .
    \"id\": string,
    \"anonymousId\": int,
  };
  type t_users_User_AdminUser = {
    .
    \"id\": string,
    \"name\": string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {. \"users\": array(t_users_User)};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nusers  {\\n__typename\\n...on AdminUser   {\\nid  \\nname  \\n}\\n\\n...on AnonymousUser   {\\nid  \\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           let typename: string =
             Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
           (
             switch (typename) {
             | \"AnonymousUser\" =>
               `AnonymousUser(
                 {
                   let value: Raw.t_users_User_AnonymousUser =
                     Obj.magic(value);
                   let anonymousId = {
                     let value = value##anonymousId;
                     value;
                   }
                   and id = {
                     let value = value##id;
                     value;
                   };
                   {\"id\": id, \"anonymousId\": anonymousId};
                 },
               )
             | \"AdminUser\" =>
               `AdminUser(
                 {
                   let value: Raw.t_users_User_AdminUser = Obj.magic(value);
                   let name = {
                     let value = value##name;
                     value;
                   }
                   and id = {
                     let value = value##id;
                     value;
                   };
                   {\"id\": id, \"name\": name};
                 },
               )
             | _ => `UnspecifiedFragment(typename)
             }: t_users_User
           );
         );
    };
    {\"users\": users};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           switch (value) {
           | `AnonymousUser(value) => (
               Obj.magic(
                 {
                   let anonymousId = {
                     let value = value##anonymousId;
                     value;
                   }
                   and id = {
                     let value = value##id;
                     value;
                   };
                   {
                     \"__typename\": \"AnonymousUser\",
                     \"id\": id,
                     \"anonymousId\": anonymousId,
                   };
                 },
               ): Raw.t_users_User
             )
           | `AdminUser(value) => (
               Obj.magic(
                 {
                   let name = {
                     let value = value##name;
                     value;
                   }
                   and id = {
                     let value = value##id;
                     value;
                   };
                   {\"__typename\": \"AdminUser\", \"id\": id, \"name\": name};
                 },
               ): Raw.t_users_User
             )
           | `UnspecifiedFragment(_) => (
               Obj.magic(Js.Dict.empty()): Raw.t_users_User
             )
           }
         );
    };
    {\"users\": users};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module QueryWithTypename = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_users_User_AdminUser = {
      .
      \"__typename\": string,
      \"id\": string,
    };
    type t_users_User;
    type t = {. \"users\": array(t_users_User)};
    type t_variables = unit;
  };
  type t_users_User_AdminUser = {
    .
    \"__typename\": string,
    \"id\": string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {. \"users\": array(t_users_User)};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nusers  {\\n__typename\\n...on AdminUser   {\\n__typename  \\nid  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           let typename: string =
             Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
           (
             switch (typename) {
             | \"AdminUser\" =>
               `AdminUser(
                 {
                   let value: Raw.t_users_User_AdminUser = Obj.magic(value);
                   let id = {
                     let value = value##id;
                     value;
                   }
                   and __typename = {
                     let value = value##__typename;
                     value;
                   };
                   {\"__typename\": __typename, \"id\": id};
                 },
               )
             | _ => `UnspecifiedFragment(typename)
             }: t_users_User
           );
         );
    };
    {\"users\": users};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           switch (value) {
           | `AdminUser(value) => (
               Obj.magic(
                 {
                   let id = {
                     let value = value##id;
                     value;
                   }
                   and __typename = {
                     let value = value##__typename;
                     value;
                   };
                   {\"__typename\": \"AdminUser\", \"id\": id};
                 },
               ): Raw.t_users_User
             )
           | `UnspecifiedFragment(_) => (
               Obj.magic(Js.Dict.empty()): Raw.t_users_User
             )
           }
         );
    };
    {\"users\": users};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module QueryWithMixedFragments = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_users_User_AnonymousUser = {
      .
      \"__typename\": string,
      \"anonymousId\": int,
    };
    type t_users_User_AdminUser = {
      .
      \"__typename\": string,
      \"name\": string,
    };
    type t_users_User;
    type t_users;
    type t = {. \"users\": array(t_users)};
    type t_variables = unit;
  };
  type t_users_User_AnonymousUser = {. \"anonymousId\": int};
  type t_users_User_AdminUser = {. \"name\": string};
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    .
    \"fragment\": t_users_User,
    \"id\": string,
  };
  type t = {. \"users\": array(t_users)};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nusers  {\\n__typename\\nid  \\n...on AdminUser   {\\nname  \\n}\\n\\n...on AnonymousUser   {\\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           let id = {
             let value =
               Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"id\"));
             value;
           };
           {
             \"fragment\": {
               let typename: string =
                 Obj.magic(
                   Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"),
                 );
               (
                 switch (typename) {
                 | \"AnonymousUser\" =>
                   `AnonymousUser(
                     {
                       let value: Raw.t_users_User_AnonymousUser =
                         Obj.magic(value);
                       let anonymousId = {
                         let value = value##anonymousId;
                         value;
                       };
                       {\"anonymousId\": anonymousId};
                     },
                   )
                 | \"AdminUser\" =>
                   `AdminUser(
                     {
                       let value: Raw.t_users_User_AdminUser =
                         Obj.magic(value);
                       let name = {
                         let value = value##name;
                         value;
                       };
                       {\"name\": name};
                     },
                   )
                 | _ => `UnspecifiedFragment(typename)
                 }: t_users_User
               );
             },
             \"id\": id,
           };
         );
    };
    {\"users\": users};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map((value) =>
           (
             Obj.magic(
               Js.Array.reduce(
                 GraphQL_PPX.deepMerge,
                 Obj.magic(
                   {
                     let id = {
                       let value = value##id;
                       value;
                     };
                     {\"id\": id};
                   },
                 ): Js.Json.t,
                 [|
                   {
                     let value = value##fragment;
                     (
                       Obj.magic(
                         switch (value) {
                         | `AnonymousUser(value) => (
                             Obj.magic(
                               {
                                 let anonymousId = {
                                   let value = value##anonymousId;
                                   value;
                                 };
                                 {
                                   \"__typename\": \"AnonymousUser\",
                                   \"anonymousId\": anonymousId,
                                 };
                               },
                             ): Raw.t_users_User
                           )
                         | `AdminUser(value) => (
                             Obj.magic(
                               {
                                 let name = {
                                   let value = value##name;
                                   value;
                                 };
                                 {\"__typename\": \"AdminUser\", \"name\": name};
                               },
                             ): Raw.t_users_User
                           )
                         | `UnspecifiedFragment(_) => (
                             Obj.magic(Js.Dict.empty()): Raw.t_users_User
                           )
                         },
                       ): Js.Json.t
                     );
                   },
                 |],
               ),
             ): Raw.t_users
           )
         );
    };
    {\"users\": users};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module MixedQueryWithTypename = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_users_User_AdminUser = {
      .
      \"__typename\": string,
      \"id\": string,
    };
    type t_users_User;
    type t_users;
    type t = {. \"users\": array(t_users)};
    type t_variables = unit;
  };
  type t_users_User_AdminUser = {
    .
    \"__typename\": string,
    \"id\": string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    .
    \"fragment\": t_users_User,
    \"__typename\": string,
    \"id\": string,
  };
  type t = {. \"users\": array(t_users)};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nusers  {\\n__typename\\nid  \\n__typename  \\n...on AdminUser   {\\n__typename  \\nid  \\n}\\n\\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           let id = {
             let value =
               Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"id\"));
             value;
           }
           and __typename = {
             let value =
               Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
             value;
           };
           {
             \"fragment\": {
               let typename: string =
                 Obj.magic(
                   Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"),
                 );
               (
                 switch (typename) {
                 | \"AdminUser\" =>
                   `AdminUser(
                     {
                       let value: Raw.t_users_User_AdminUser =
                         Obj.magic(value);
                       let id = {
                         let value = value##id;
                         value;
                       }
                       and __typename = {
                         let value = value##__typename;
                         value;
                       };
                       {\"__typename\": __typename, \"id\": id};
                     },
                   )
                 | _ => `UnspecifiedFragment(typename)
                 }: t_users_User
               );
             },
             \"__typename\": __typename,
             \"id\": id,
           };
         );
    };
    {\"users\": users};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map((value) =>
           (
             Obj.magic(
               Js.Array.reduce(
                 GraphQL_PPX.deepMerge,
                 Obj.magic(
                   {
                     let id = {
                       let value = value##id;
                       value;
                     }
                     and __typename = {
                       let value = value##__typename;
                       value;
                     };
                     {\"__typename\": __typename, \"id\": id};
                   },
                 ): Js.Json.t,
                 [|
                   {
                     let value = value##fragment;
                     (
                       Obj.magic(
                         switch (value) {
                         | `AdminUser(value) => (
                             Obj.magic(
                               {
                                 let id = {
                                   let value = value##id;
                                   value;
                                 }
                                 and __typename = {
                                   let value = value##__typename;
                                   value;
                                 };
                                 {\"__typename\": \"AdminUser\", \"id\": id};
                               },
                             ): Raw.t_users_User
                           )
                         | `UnspecifiedFragment(_) => (
                             Obj.magic(Js.Dict.empty()): Raw.t_users_User
                           )
                         },
                       ): Js.Json.t
                     );
                   },
                 |],
               ),
             ): Raw.t_users
           )
         );
    };
    {\"users\": users};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module QueryWithoutFragments = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_users = {. \"id\": string};
    type t = {. \"users\": array(t_users)};
    type t_variables = unit;
  };
  type t_users = {. \"id\": string};
  type t = {. \"users\": array(t_users)};
  type t_variables = unit;
  /**The GraphQL query string*/
  let query = \"query   {\\nusers  {\\n__typename\\nid  \\n}\\n\\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           let id = {
             let value = value##id;
             value;
           };
           {\"id\": id};
         );
    };
    {\"users\": users};
  };
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => {
    let users = {
      let value = value##users;
      value
      |> Js.Array.map(value =>
           let id = {
             let value = value##id;
             value;
           };
           {\"id\": id};
         );
    };
    {\"users\": users};
  };
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

