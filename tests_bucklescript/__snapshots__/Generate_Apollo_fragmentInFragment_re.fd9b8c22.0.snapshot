Generate Apollo › fragmentInFragment.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module GraphQL_PPX = {
  let deepMerge = (json1, _) => json1;
};
module ListFragment = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = {
      __typename: string,
      nullableOfNullable: Js.Nullable.t(array(Js.Nullable.t(string))),
    };
    type nonrec t_Lists = t;
  };
  type t = {
    __typename: string,
    nullableOfNullable: option(array(option(string))),
  };
  type nonrec t_Lists = t;
  /**The GraphQL query string*/
  let query = \"fragment ListFragment on Lists   {\\n__typename  \\nnullableOfNullable  \\n}\\n\";
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      __typename: {
        let value = (value: Raw.t).__typename;
        value;
      },
      nullableOfNullable: {
        let value = (value: Raw.t).nullableOfNullable;
        switch (Js.toOption(value)) {
        | Some(value) =>
          Some(
            value
            |> Js.Array.map(value =>
                 switch (Js.toOption(value)) {
                 | Some(value) => Some(value)
                 | None => None
                 }
               ),
          )
        | None => None
        };
      },
    }: t
  );

  let verifyArgsAndParse =
      (~fragmentName as _ListFragment: [ | `ListFragment], value: Raw.t) =>
    parse(value);
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    {
      let nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          Js.Nullable.return(
            value
            |> Js.Array.map(value =>
                 switch (value) {
                 | Some(value) => Js.Nullable.return(value)
                 | None => Js.Nullable.null
                 }
               ),
          )
        | None => Js.Nullable.null
        };
      }
      and __typename = {
        let value = (value: t).__typename;
        value;
      };
      {__typename, nullableOfNullable};
    }: Raw.t
  );
  let verifyName =
    fun
    | `ListFragment => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql;
    /**```
Lists {
  nullableOfNullable: [String]
  nullableOfNonNullable: [String!]
  nonNullableOfNullable: [String]!
  nonNullableOfNonNullable: [String!]!
  listWithArg: [String]
}
```*/
    let graphql: graphql = Obj.magic(0);
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};
module Another = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t;
    type nonrec t_Lists = t;
  };
  type t = {
    __typename: string,
    nullableOfNullable: option(array(option(string))),
    listFragment: ListFragment.t_Lists,
  };
  type nonrec t_Lists = t;
  /**The GraphQL query string*/
  let query =
    \"fragment Another on Lists   {\\n__typename  \\nnullableOfNullable  \\n...ListFragment   \\n}\\n\"
    ++ ListFragment.query;
  /**Parse the JSON GraphQL data to ReasonML data types*/
  let parse = (value: Raw.t): t => (
    {
      __typename: {
        let value =
          Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), \"__typename\"));
        value;
      },
      nullableOfNullable: {
        let value =
          Obj.magic(
            Js.Dict.unsafeGet(Obj.magic(value), \"nullableOfNullable\"),
          );
        switch (Js.toOption(value)) {
        | Some(value) =>
          Some(
            value
            |> Js.Array.map(value =>
                 switch (Js.toOption(value)) {
                 | Some(value) => Some(value)
                 | None => None
                 }
               ),
          )
        | None => None
        };
      },
      listFragment: {
        let value: ListFragment.Raw.t = Obj.magic(value);

        ListFragment.verifyArgsAndParse(~fragmentName=`ListFragment, value);
      },
    }: t
  );

  let verifyArgsAndParse =
      (~fragmentName as _Another: [ | `Another], value: Raw.t) =>
    parse(value);
  /**Serialize the ReasonML GraphQL data that was parsed using the parse function back to the original JSON compatible data */
  let serialize = (value: t): Raw.t => (
    Obj.magic(
      Js.Array.reduce(
        GraphQL_PPX.deepMerge,
        Obj.magic(
          {
            let nullableOfNullable = {
              let value = (value: t).nullableOfNullable;
              switch (value) {
              | Some(value) =>
                Js.Nullable.return(
                  value
                  |> Js.Array.map(value =>
                       switch (value) {
                       | Some(value) => Js.Nullable.return(value)
                       | None => Js.Nullable.null
                       }
                     ),
                )
              | None => Js.Nullable.null
              };
            }
            and __typename = {
              let value = (value: t).__typename;
              value;
            };
            {
              \"__typename\": __typename,
              \"nullableOfNullable\": nullableOfNullable,
            };
          },
        ): Js.Json.t,
        [|
          (
            Obj.magic(ListFragment.serialize((value: t).listFragment)): Js.Json.t
          ),
        |],
      ),
    ): Raw.t
  );
  let verifyName =
    fun
    | `Another => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  module Z__INTERNAL = {
    type root = t;
    type nonrec graphql;
    /**```
Lists {
  nullableOfNullable: [String]
  nullableOfNonNullable: [String!]
  nonNullableOfNullable: [String]!
  nonNullableOfNonNullable: [String!]!
  listWithArg: [String]
}
```*/
    let graphql: graphql = Obj.magic(0);
    type nonrec graphql_module;
    /**The contents of this module are automatically generated by graphql-ppx.*/
    let graphql_module: graphql_module = Obj.magic(0);
  };
};

